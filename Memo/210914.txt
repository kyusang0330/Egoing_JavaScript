개발환경 : 개발자 도구(F12)

1. 정규 표현식

1) 정규 표현식 생성

var str = a;
a를 선언해주고 pattern 이라는 이름으로

var pattern = /a/;

var pattern - new RegExp('a');

이렇게 선언해주면 정규표현식을 컴파일해서 객체를 만든 것이다.

2) 메소드 실행

pattern.exec('abcdef');
를 해주면 
['a'] 라고 나오고

pattern.exec('bcdefg');
를 해주면
null 이라고 출력된다.
-----------------------------------------------------
pattern.test('abcdef');
true가 출력되고

pattern.test('bcdef');
false가 출력된다.

exec는 추출이 된다고 보면 되고, test는 말 그대로 테스트를 해서 맞는지 틀린지 구별하는 것이다.
-----------------------------------------------------
var pattern = /a/;
var str = 'abcdef'; 선언 후에
str.match(pattern);

['a']가 출력된다. 처음 str을 만드는 것만 조금다르고, exec와 비슷하다.

------------------------------------------------------------
str.replace(pattern, 'A');
을 해주면 'Abcdef'가 출력된다.
replace는 바꿔주는 역할을 한다.

3) 메소드 옵션

i와 g가 있다.
i를 붙이면 대분자 소문자를 구별하지 않고 결과 값을 리턴한다.

var xi = /a/;
console.log("Abcde".match(xi));
null이 출력된다.
----------------------------------------------------------
var oi = /a/i;
console.log("Abcde".match(oi));
['A']가 출력된다.

g를 붙이면 검색된 모든 결과를 출력하는데. xg면 중복된 것은 하나로만 표시한다.

var xg = /a/;
console.log("abcdea".match(xg));
['a']만 출력되는데,
-------------------------------------------------------------
var og = /a/g;
console.log("abcdea".match(og));
['a', 'a'] g를 사용하면 둘 다 출력된다.

-----------------------------------------------------------------
ig를 모두사용하면
var ig = /a/ig;
"AabcdAa".match(ig);

 ['A', 'a', 'A', 'a'] 이렇게 대문자 소문자 구별없고 모든 것이 다 출력된다.

4) 캡처

var pattern = /(\w+)\s(\w+)/;

(\w+는 a-z,A-z,0-9를 사용할 수 있다는 것을 의미한다.
/s는 띄어쓰라는 의미이다.)

var str = "coding everybody";
var result = str.replace(pattern, "$2, $1");

($1은 coding이고 $2는 everybody이다. replace를 사용해서 두 개의 위치는 바꿨다는 뜻이다.)

console.log(result);
를 사용하면
everybody, coding 이렇게 출력된다.

* 치환은 정규표현식 수업을 더 들을 예정.

